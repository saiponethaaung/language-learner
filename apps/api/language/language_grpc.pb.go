// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: language.proto

package language

import (
	context "context"
	common "github.com/saiponethaaung/language-learner/apps/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LanguageService_GetLanguages_FullMethodName         = "/language.LanguageService/GetLanguages"
	LanguageService_GetLanguagesByIds_FullMethodName    = "/language.LanguageService/GetLanguagesByIds"
	LanguageService_GetLanguage_FullMethodName          = "/language.LanguageService/GetLanguage"
	LanguageService_CreateLanguage_FullMethodName       = "/language.LanguageService/CreateLanguage"
	LanguageService_UpdateLanguage_FullMethodName       = "/language.LanguageService/UpdateLanguage"
	LanguageService_UpdateLanguageStatus_FullMethodName = "/language.LanguageService/UpdateLanguageStatus"
	LanguageService_DeleteLanguage_FullMethodName       = "/language.LanguageService/DeleteLanguage"
)

// LanguageServiceClient is the client API for LanguageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguageServiceClient interface {
	GetLanguages(ctx context.Context, in *GetLanguagesRequest, opts ...grpc.CallOption) (*PaginationResponse, error)
	GetLanguagesByIds(ctx context.Context, in *GetLanguagesByIdsRequest, opts ...grpc.CallOption) (*LanguagesResponse, error)
	GetLanguage(ctx context.Context, in *common.IntIDRequest, opts ...grpc.CallOption) (*LanguageObject, error)
	CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*LanguageObject, error)
	UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*LanguageObject, error)
	UpdateLanguageStatus(ctx context.Context, in *UpdateLanguageStatusRequest, opts ...grpc.CallOption) (*LanguageObject, error)
	DeleteLanguage(ctx context.Context, in *common.IntIDRequest, opts ...grpc.CallOption) (*common.EmptyRequest, error)
}

type languageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageServiceClient(cc grpc.ClientConnInterface) LanguageServiceClient {
	return &languageServiceClient{cc}
}

func (c *languageServiceClient) GetLanguages(ctx context.Context, in *GetLanguagesRequest, opts ...grpc.CallOption) (*PaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaginationResponse)
	err := c.cc.Invoke(ctx, LanguageService_GetLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) GetLanguagesByIds(ctx context.Context, in *GetLanguagesByIdsRequest, opts ...grpc.CallOption) (*LanguagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguagesResponse)
	err := c.cc.Invoke(ctx, LanguageService_GetLanguagesByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) GetLanguage(ctx context.Context, in *common.IntIDRequest, opts ...grpc.CallOption) (*LanguageObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageObject)
	err := c.cc.Invoke(ctx, LanguageService_GetLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*LanguageObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageObject)
	err := c.cc.Invoke(ctx, LanguageService_CreateLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*LanguageObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageObject)
	err := c.cc.Invoke(ctx, LanguageService_UpdateLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) UpdateLanguageStatus(ctx context.Context, in *UpdateLanguageStatusRequest, opts ...grpc.CallOption) (*LanguageObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageObject)
	err := c.cc.Invoke(ctx, LanguageService_UpdateLanguageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) DeleteLanguage(ctx context.Context, in *common.IntIDRequest, opts ...grpc.CallOption) (*common.EmptyRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.EmptyRequest)
	err := c.cc.Invoke(ctx, LanguageService_DeleteLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageServiceServer is the server API for LanguageService service.
// All implementations must embed UnimplementedLanguageServiceServer
// for forward compatibility.
type LanguageServiceServer interface {
	GetLanguages(context.Context, *GetLanguagesRequest) (*PaginationResponse, error)
	GetLanguagesByIds(context.Context, *GetLanguagesByIdsRequest) (*LanguagesResponse, error)
	GetLanguage(context.Context, *common.IntIDRequest) (*LanguageObject, error)
	CreateLanguage(context.Context, *CreateLanguageRequest) (*LanguageObject, error)
	UpdateLanguage(context.Context, *UpdateLanguageRequest) (*LanguageObject, error)
	UpdateLanguageStatus(context.Context, *UpdateLanguageStatusRequest) (*LanguageObject, error)
	DeleteLanguage(context.Context, *common.IntIDRequest) (*common.EmptyRequest, error)
	mustEmbedUnimplementedLanguageServiceServer()
}

// UnimplementedLanguageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLanguageServiceServer struct{}

func (UnimplementedLanguageServiceServer) GetLanguages(context.Context, *GetLanguagesRequest) (*PaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguages not implemented")
}
func (UnimplementedLanguageServiceServer) GetLanguagesByIds(context.Context, *GetLanguagesByIdsRequest) (*LanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguagesByIds not implemented")
}
func (UnimplementedLanguageServiceServer) GetLanguage(context.Context, *common.IntIDRequest) (*LanguageObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguage not implemented")
}
func (UnimplementedLanguageServiceServer) CreateLanguage(context.Context, *CreateLanguageRequest) (*LanguageObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLanguage not implemented")
}
func (UnimplementedLanguageServiceServer) UpdateLanguage(context.Context, *UpdateLanguageRequest) (*LanguageObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (UnimplementedLanguageServiceServer) UpdateLanguageStatus(context.Context, *UpdateLanguageStatusRequest) (*LanguageObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguageStatus not implemented")
}
func (UnimplementedLanguageServiceServer) DeleteLanguage(context.Context, *common.IntIDRequest) (*common.EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLanguage not implemented")
}
func (UnimplementedLanguageServiceServer) mustEmbedUnimplementedLanguageServiceServer() {}
func (UnimplementedLanguageServiceServer) testEmbeddedByValue()                         {}

// UnsafeLanguageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageServiceServer will
// result in compilation errors.
type UnsafeLanguageServiceServer interface {
	mustEmbedUnimplementedLanguageServiceServer()
}

func RegisterLanguageServiceServer(s grpc.ServiceRegistrar, srv LanguageServiceServer) {
	// If the following call pancis, it indicates UnimplementedLanguageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LanguageService_ServiceDesc, srv)
}

func _LanguageService_GetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).GetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_GetLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).GetLanguages(ctx, req.(*GetLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_GetLanguagesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguagesByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).GetLanguagesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_GetLanguagesByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).GetLanguagesByIds(ctx, req.(*GetLanguagesByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_GetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IntIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).GetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_GetLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).GetLanguage(ctx, req.(*common.IntIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_CreateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).CreateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_CreateLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).CreateLanguage(ctx, req.(*CreateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_UpdateLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).UpdateLanguage(ctx, req.(*UpdateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_UpdateLanguageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).UpdateLanguageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_UpdateLanguageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).UpdateLanguageStatus(ctx, req.(*UpdateLanguageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_DeleteLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IntIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).DeleteLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_DeleteLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).DeleteLanguage(ctx, req.(*common.IntIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguageService_ServiceDesc is the grpc.ServiceDesc for LanguageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "language.LanguageService",
	HandlerType: (*LanguageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguages",
			Handler:    _LanguageService_GetLanguages_Handler,
		},
		{
			MethodName: "GetLanguagesByIds",
			Handler:    _LanguageService_GetLanguagesByIds_Handler,
		},
		{
			MethodName: "GetLanguage",
			Handler:    _LanguageService_GetLanguage_Handler,
		},
		{
			MethodName: "CreateLanguage",
			Handler:    _LanguageService_CreateLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _LanguageService_UpdateLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguageStatus",
			Handler:    _LanguageService_UpdateLanguageStatus_Handler,
		},
		{
			MethodName: "DeleteLanguage",
			Handler:    _LanguageService_DeleteLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "language.proto",
}
