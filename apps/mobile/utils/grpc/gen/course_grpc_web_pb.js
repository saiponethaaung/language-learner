/**
 * @fileoverview gRPC-Web generated client stub for course
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.1
// source: course.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_pb = require('./common_pb.js')
const proto = {};
proto.course = require('./course_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.course.CourseServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.course.CourseServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.course.CreateCourse,
 *   !proto.course.CourseObject>}
 */
const methodDescriptor_CourseService_Create = new grpc.web.MethodDescriptor(
  '/course.CourseService/Create',
  grpc.web.MethodType.UNARY,
  proto.course.CreateCourse,
  proto.course.CourseObject,
  /**
   * @param {!proto.course.CreateCourse} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.course.CourseObject.deserializeBinary
);


/**
 * @param {!proto.course.CreateCourse} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.course.CourseObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.course.CourseObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.course.CourseServiceClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/course.CourseService/Create',
      request,
      metadata || {},
      methodDescriptor_CourseService_Create,
      callback);
};


/**
 * @param {!proto.course.CreateCourse} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.course.CourseObject>}
 *     Promise that resolves to the response
 */
proto.course.CourseServicePromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/course.CourseService/Create',
      request,
      metadata || {},
      methodDescriptor_CourseService_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.IntIDRequest,
 *   !proto.course.CourseObject>}
 */
const methodDescriptor_CourseService_Get = new grpc.web.MethodDescriptor(
  '/course.CourseService/Get',
  grpc.web.MethodType.UNARY,
  common_pb.IntIDRequest,
  proto.course.CourseObject,
  /**
   * @param {!proto.common.IntIDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.course.CourseObject.deserializeBinary
);


/**
 * @param {!proto.common.IntIDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.course.CourseObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.course.CourseObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.course.CourseServiceClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/course.CourseService/Get',
      request,
      metadata || {},
      methodDescriptor_CourseService_Get,
      callback);
};


/**
 * @param {!proto.common.IntIDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.course.CourseObject>}
 *     Promise that resolves to the response
 */
proto.course.CourseServicePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/course.CourseService/Get',
      request,
      metadata || {},
      methodDescriptor_CourseService_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.EmptyRequest,
 *   !proto.course.CourseObject>}
 */
const methodDescriptor_CourseService_GetAll = new grpc.web.MethodDescriptor(
  '/course.CourseService/GetAll',
  grpc.web.MethodType.UNARY,
  common_pb.EmptyRequest,
  proto.course.CourseObject,
  /**
   * @param {!proto.common.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.course.CourseObject.deserializeBinary
);


/**
 * @param {!proto.common.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.course.CourseObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.course.CourseObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.course.CourseServiceClient.prototype.getAll =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/course.CourseService/GetAll',
      request,
      metadata || {},
      methodDescriptor_CourseService_GetAll,
      callback);
};


/**
 * @param {!proto.common.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.course.CourseObject>}
 *     Promise that resolves to the response
 */
proto.course.CourseServicePromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/course.CourseService/GetAll',
      request,
      metadata || {},
      methodDescriptor_CourseService_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.course.UpdateCourse,
 *   !proto.course.CourseObject>}
 */
const methodDescriptor_CourseService_Update = new grpc.web.MethodDescriptor(
  '/course.CourseService/Update',
  grpc.web.MethodType.UNARY,
  proto.course.UpdateCourse,
  proto.course.CourseObject,
  /**
   * @param {!proto.course.UpdateCourse} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.course.CourseObject.deserializeBinary
);


/**
 * @param {!proto.course.UpdateCourse} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.course.CourseObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.course.CourseObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.course.CourseServiceClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/course.CourseService/Update',
      request,
      metadata || {},
      methodDescriptor_CourseService_Update,
      callback);
};


/**
 * @param {!proto.course.UpdateCourse} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.course.CourseObject>}
 *     Promise that resolves to the response
 */
proto.course.CourseServicePromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/course.CourseService/Update',
      request,
      metadata || {},
      methodDescriptor_CourseService_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.IDRequest,
 *   !proto.common.StatusResponse>}
 */
const methodDescriptor_CourseService_Delete = new grpc.web.MethodDescriptor(
  '/course.CourseService/Delete',
  grpc.web.MethodType.UNARY,
  common_pb.IDRequest,
  common_pb.StatusResponse,
  /**
   * @param {!proto.common.IDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.StatusResponse.deserializeBinary
);


/**
 * @param {!proto.common.IDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.StatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.StatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.course.CourseServiceClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/course.CourseService/Delete',
      request,
      metadata || {},
      methodDescriptor_CourseService_Delete,
      callback);
};


/**
 * @param {!proto.common.IDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.StatusResponse>}
 *     Promise that resolves to the response
 */
proto.course.CourseServicePromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/course.CourseService/Delete',
      request,
      metadata || {},
      methodDescriptor_CourseService_Delete);
};


module.exports = proto.course;

