/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.1
 * source: language.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace language {
    export class GetLanguagesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page?: number;
            limit?: number;
        }): GetLanguagesRequest {
            const message = new GetLanguagesRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                limit?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeInt32(1, this.page);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLanguagesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLanguagesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLanguagesRequest {
            return GetLanguagesRequest.deserialize(bytes);
        }
    }
    export class CreateLanguageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            code?: string;
        }): CreateLanguageRequest {
            const message = new CreateLanguageRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                code?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateLanguageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateLanguageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateLanguageRequest {
            return CreateLanguageRequest.deserialize(bytes);
        }
    }
    export class UpdateLanguageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            code?: string;
        }): UpdateLanguageRequest {
            const message = new UpdateLanguageRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                code?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.code.length)
                writer.writeString(3, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateLanguageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateLanguageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateLanguageRequest {
            return UpdateLanguageRequest.deserialize(bytes);
        }
    }
    export class UpdateLanguageStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            status?: boolean;
        }): UpdateLanguageStatusRequest {
            const message = new UpdateLanguageStatusRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                status?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.status != false)
                writer.writeBool(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateLanguageStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateLanguageStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateLanguageStatusRequest {
            return UpdateLanguageStatusRequest.deserialize(bytes);
        }
    }
    export class LanguageObject extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            code?: string;
            createdAt?: string;
            updatedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set updatedAt(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            code?: string;
            createdAt?: string;
            updatedAt?: string;
        }): LanguageObject {
            const message = new LanguageObject({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                code?: string;
                createdAt?: string;
                updatedAt?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.code.length)
                writer.writeString(3, this.code);
            if (this.createdAt.length)
                writer.writeString(4, this.createdAt);
            if (this.updatedAt.length)
                writer.writeString(5, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LanguageObject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LanguageObject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.code = reader.readString();
                        break;
                    case 4:
                        message.createdAt = reader.readString();
                        break;
                    case 5:
                        message.updatedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LanguageObject {
            return LanguageObject.deserialize(bytes);
        }
    }
    export class PaginationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: LanguageObject[];
            pagination?: dependency_1.common.PaginationObject;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, LanguageObject, 1) as LanguageObject[];
        }
        set data(value: LanguageObject[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.PaginationObject, 2) as dependency_1.common.PaginationObject;
        }
        set pagination(value: dependency_1.common.PaginationObject) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            data?: ReturnType<typeof LanguageObject.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_1.common.PaginationObject.prototype.toObject>;
        }): PaginationResponse {
            const message = new PaginationResponse({});
            if (data.data != null) {
                message.data = data.data.map(item => LanguageObject.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.common.PaginationObject.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof LanguageObject.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_1.common.PaginationObject.prototype.toObject>;
            } = {};
            if (this.data != null) {
                data.data = this.data.map((item: LanguageObject) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedMessage(1, this.data, (item: LanguageObject) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaginationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PaginationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LanguageObject.deserialize(reader), LanguageObject));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.common.PaginationObject.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PaginationResponse {
            return PaginationResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedLanguageServiceService {
        static definition = {
            GetLanguages: {
                path: "/language.LanguageService/GetLanguages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLanguagesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLanguagesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PaginationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PaginationResponse.deserialize(new Uint8Array(bytes))
            },
            GetLanguage: {
                path: "/language.LanguageService/GetLanguage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.common.IntIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.common.IntIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LanguageObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LanguageObject.deserialize(new Uint8Array(bytes))
            },
            CreateLanguage: {
                path: "/language.LanguageService/CreateLanguage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateLanguageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateLanguageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LanguageObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LanguageObject.deserialize(new Uint8Array(bytes))
            },
            UpdateLanguage: {
                path: "/language.LanguageService/UpdateLanguage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateLanguageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateLanguageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LanguageObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LanguageObject.deserialize(new Uint8Array(bytes))
            },
            UpdateLanguageStatus: {
                path: "/language.LanguageService/UpdateLanguageStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateLanguageStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateLanguageStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LanguageObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LanguageObject.deserialize(new Uint8Array(bytes))
            },
            DeleteLanguage: {
                path: "/language.LanguageService/DeleteLanguage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.common.IntIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.common.IntIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.common.EmptyRequest) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.common.EmptyRequest.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetLanguages(call: grpc_1.ServerUnaryCall<GetLanguagesRequest, PaginationResponse>, callback: grpc_1.sendUnaryData<PaginationResponse>): void;
        abstract GetLanguage(call: grpc_1.ServerUnaryCall<dependency_1.common.IntIDRequest, LanguageObject>, callback: grpc_1.sendUnaryData<LanguageObject>): void;
        abstract CreateLanguage(call: grpc_1.ServerUnaryCall<CreateLanguageRequest, LanguageObject>, callback: grpc_1.sendUnaryData<LanguageObject>): void;
        abstract UpdateLanguage(call: grpc_1.ServerUnaryCall<UpdateLanguageRequest, LanguageObject>, callback: grpc_1.sendUnaryData<LanguageObject>): void;
        abstract UpdateLanguageStatus(call: grpc_1.ServerUnaryCall<UpdateLanguageStatusRequest, LanguageObject>, callback: grpc_1.sendUnaryData<LanguageObject>): void;
        abstract DeleteLanguage(call: grpc_1.ServerUnaryCall<dependency_1.common.IntIDRequest, dependency_1.common.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.common.EmptyRequest>): void;
    }
    export class LanguageServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedLanguageServiceService.definition, "LanguageService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetLanguages: GrpcUnaryServiceInterface<GetLanguagesRequest, PaginationResponse> = (message: GetLanguagesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PaginationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PaginationResponse>, callback?: grpc_1.requestCallback<PaginationResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLanguages(message, metadata, options, callback);
        };
        GetLanguage: GrpcUnaryServiceInterface<dependency_1.common.IntIDRequest, LanguageObject> = (message: dependency_1.common.IntIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LanguageObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LanguageObject>, callback?: grpc_1.requestCallback<LanguageObject>): grpc_1.ClientUnaryCall => {
            return super.GetLanguage(message, metadata, options, callback);
        };
        CreateLanguage: GrpcUnaryServiceInterface<CreateLanguageRequest, LanguageObject> = (message: CreateLanguageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LanguageObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LanguageObject>, callback?: grpc_1.requestCallback<LanguageObject>): grpc_1.ClientUnaryCall => {
            return super.CreateLanguage(message, metadata, options, callback);
        };
        UpdateLanguage: GrpcUnaryServiceInterface<UpdateLanguageRequest, LanguageObject> = (message: UpdateLanguageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LanguageObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LanguageObject>, callback?: grpc_1.requestCallback<LanguageObject>): grpc_1.ClientUnaryCall => {
            return super.UpdateLanguage(message, metadata, options, callback);
        };
        UpdateLanguageStatus: GrpcUnaryServiceInterface<UpdateLanguageStatusRequest, LanguageObject> = (message: UpdateLanguageStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LanguageObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LanguageObject>, callback?: grpc_1.requestCallback<LanguageObject>): grpc_1.ClientUnaryCall => {
            return super.UpdateLanguageStatus(message, metadata, options, callback);
        };
        DeleteLanguage: GrpcUnaryServiceInterface<dependency_1.common.IntIDRequest, dependency_1.common.EmptyRequest> = (message: dependency_1.common.IntIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.EmptyRequest>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.EmptyRequest>, callback?: grpc_1.requestCallback<dependency_1.common.EmptyRequest>): grpc_1.ClientUnaryCall => {
            return super.DeleteLanguage(message, metadata, options, callback);
        };
    }
}
