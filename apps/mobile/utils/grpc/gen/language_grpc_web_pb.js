/**
 * @fileoverview gRPC-Web generated client stub for language
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: language.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_pb = require('./common_pb.js')
const proto = {};
proto.language = require('./language_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.language.LanguageServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.language.LanguageServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.language.GetLanguagesRequest,
 *   !proto.language.PaginationResponse>}
 */
const methodDescriptor_LanguageService_GetLanguages = new grpc.web.MethodDescriptor(
  '/language.LanguageService/GetLanguages',
  grpc.web.MethodType.UNARY,
  proto.language.GetLanguagesRequest,
  proto.language.PaginationResponse,
  /**
   * @param {!proto.language.GetLanguagesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.language.PaginationResponse.deserializeBinary
);


/**
 * @param {!proto.language.GetLanguagesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.language.PaginationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.language.PaginationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.language.LanguageServiceClient.prototype.getLanguages =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/language.LanguageService/GetLanguages',
      request,
      metadata || {},
      methodDescriptor_LanguageService_GetLanguages,
      callback);
};


/**
 * @param {!proto.language.GetLanguagesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.language.PaginationResponse>}
 *     Promise that resolves to the response
 */
proto.language.LanguageServicePromiseClient.prototype.getLanguages =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/language.LanguageService/GetLanguages',
      request,
      metadata || {},
      methodDescriptor_LanguageService_GetLanguages);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.language.GetLanguagesByIdsRequest,
 *   !proto.language.LanguagesResponse>}
 */
const methodDescriptor_LanguageService_GetLanguagesByIds = new grpc.web.MethodDescriptor(
  '/language.LanguageService/GetLanguagesByIds',
  grpc.web.MethodType.UNARY,
  proto.language.GetLanguagesByIdsRequest,
  proto.language.LanguagesResponse,
  /**
   * @param {!proto.language.GetLanguagesByIdsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.language.LanguagesResponse.deserializeBinary
);


/**
 * @param {!proto.language.GetLanguagesByIdsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.language.LanguagesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.language.LanguagesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.language.LanguageServiceClient.prototype.getLanguagesByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/language.LanguageService/GetLanguagesByIds',
      request,
      metadata || {},
      methodDescriptor_LanguageService_GetLanguagesByIds,
      callback);
};


/**
 * @param {!proto.language.GetLanguagesByIdsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.language.LanguagesResponse>}
 *     Promise that resolves to the response
 */
proto.language.LanguageServicePromiseClient.prototype.getLanguagesByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/language.LanguageService/GetLanguagesByIds',
      request,
      metadata || {},
      methodDescriptor_LanguageService_GetLanguagesByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.IntIDRequest,
 *   !proto.language.LanguageObject>}
 */
const methodDescriptor_LanguageService_GetLanguage = new grpc.web.MethodDescriptor(
  '/language.LanguageService/GetLanguage',
  grpc.web.MethodType.UNARY,
  common_pb.IntIDRequest,
  proto.language.LanguageObject,
  /**
   * @param {!proto.common.IntIDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.language.LanguageObject.deserializeBinary
);


/**
 * @param {!proto.common.IntIDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.language.LanguageObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.language.LanguageObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.language.LanguageServiceClient.prototype.getLanguage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/language.LanguageService/GetLanguage',
      request,
      metadata || {},
      methodDescriptor_LanguageService_GetLanguage,
      callback);
};


/**
 * @param {!proto.common.IntIDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.language.LanguageObject>}
 *     Promise that resolves to the response
 */
proto.language.LanguageServicePromiseClient.prototype.getLanguage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/language.LanguageService/GetLanguage',
      request,
      metadata || {},
      methodDescriptor_LanguageService_GetLanguage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.language.CreateLanguageRequest,
 *   !proto.language.LanguageObject>}
 */
const methodDescriptor_LanguageService_CreateLanguage = new grpc.web.MethodDescriptor(
  '/language.LanguageService/CreateLanguage',
  grpc.web.MethodType.UNARY,
  proto.language.CreateLanguageRequest,
  proto.language.LanguageObject,
  /**
   * @param {!proto.language.CreateLanguageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.language.LanguageObject.deserializeBinary
);


/**
 * @param {!proto.language.CreateLanguageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.language.LanguageObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.language.LanguageObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.language.LanguageServiceClient.prototype.createLanguage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/language.LanguageService/CreateLanguage',
      request,
      metadata || {},
      methodDescriptor_LanguageService_CreateLanguage,
      callback);
};


/**
 * @param {!proto.language.CreateLanguageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.language.LanguageObject>}
 *     Promise that resolves to the response
 */
proto.language.LanguageServicePromiseClient.prototype.createLanguage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/language.LanguageService/CreateLanguage',
      request,
      metadata || {},
      methodDescriptor_LanguageService_CreateLanguage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.language.UpdateLanguageRequest,
 *   !proto.language.LanguageObject>}
 */
const methodDescriptor_LanguageService_UpdateLanguage = new grpc.web.MethodDescriptor(
  '/language.LanguageService/UpdateLanguage',
  grpc.web.MethodType.UNARY,
  proto.language.UpdateLanguageRequest,
  proto.language.LanguageObject,
  /**
   * @param {!proto.language.UpdateLanguageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.language.LanguageObject.deserializeBinary
);


/**
 * @param {!proto.language.UpdateLanguageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.language.LanguageObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.language.LanguageObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.language.LanguageServiceClient.prototype.updateLanguage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/language.LanguageService/UpdateLanguage',
      request,
      metadata || {},
      methodDescriptor_LanguageService_UpdateLanguage,
      callback);
};


/**
 * @param {!proto.language.UpdateLanguageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.language.LanguageObject>}
 *     Promise that resolves to the response
 */
proto.language.LanguageServicePromiseClient.prototype.updateLanguage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/language.LanguageService/UpdateLanguage',
      request,
      metadata || {},
      methodDescriptor_LanguageService_UpdateLanguage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.language.UpdateLanguageStatusRequest,
 *   !proto.language.LanguageObject>}
 */
const methodDescriptor_LanguageService_UpdateLanguageStatus = new grpc.web.MethodDescriptor(
  '/language.LanguageService/UpdateLanguageStatus',
  grpc.web.MethodType.UNARY,
  proto.language.UpdateLanguageStatusRequest,
  proto.language.LanguageObject,
  /**
   * @param {!proto.language.UpdateLanguageStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.language.LanguageObject.deserializeBinary
);


/**
 * @param {!proto.language.UpdateLanguageStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.language.LanguageObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.language.LanguageObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.language.LanguageServiceClient.prototype.updateLanguageStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/language.LanguageService/UpdateLanguageStatus',
      request,
      metadata || {},
      methodDescriptor_LanguageService_UpdateLanguageStatus,
      callback);
};


/**
 * @param {!proto.language.UpdateLanguageStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.language.LanguageObject>}
 *     Promise that resolves to the response
 */
proto.language.LanguageServicePromiseClient.prototype.updateLanguageStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/language.LanguageService/UpdateLanguageStatus',
      request,
      metadata || {},
      methodDescriptor_LanguageService_UpdateLanguageStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.IntIDRequest,
 *   !proto.common.EmptyRequest>}
 */
const methodDescriptor_LanguageService_DeleteLanguage = new grpc.web.MethodDescriptor(
  '/language.LanguageService/DeleteLanguage',
  grpc.web.MethodType.UNARY,
  common_pb.IntIDRequest,
  common_pb.EmptyRequest,
  /**
   * @param {!proto.common.IntIDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.EmptyRequest.deserializeBinary
);


/**
 * @param {!proto.common.IntIDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.EmptyRequest)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.EmptyRequest>|undefined}
 *     The XHR Node Readable Stream
 */
proto.language.LanguageServiceClient.prototype.deleteLanguage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/language.LanguageService/DeleteLanguage',
      request,
      metadata || {},
      methodDescriptor_LanguageService_DeleteLanguage,
      callback);
};


/**
 * @param {!proto.common.IntIDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.EmptyRequest>}
 *     Promise that resolves to the response
 */
proto.language.LanguageServicePromiseClient.prototype.deleteLanguage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/language.LanguageService/DeleteLanguage',
      request,
      metadata || {},
      methodDescriptor_LanguageService_DeleteLanguage);
};


module.exports = proto.language;

