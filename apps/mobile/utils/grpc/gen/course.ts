/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.1
 * source: course.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace course {
    export class CreateCourse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            targetLanguageID?: number;
            sourceLanguageID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("targetLanguageID" in data && data.targetLanguageID != undefined) {
                    this.targetLanguageID = data.targetLanguageID;
                }
                if ("sourceLanguageID" in data && data.sourceLanguageID != undefined) {
                    this.sourceLanguageID = data.sourceLanguageID;
                }
            }
        }
        get targetLanguageID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set targetLanguageID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get sourceLanguageID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sourceLanguageID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            targetLanguageID?: number;
            sourceLanguageID?: number;
        }): CreateCourse {
            const message = new CreateCourse({});
            if (data.targetLanguageID != null) {
                message.targetLanguageID = data.targetLanguageID;
            }
            if (data.sourceLanguageID != null) {
                message.sourceLanguageID = data.sourceLanguageID;
            }
            return message;
        }
        toObject() {
            const data: {
                targetLanguageID?: number;
                sourceLanguageID?: number;
            } = {};
            if (this.targetLanguageID != null) {
                data.targetLanguageID = this.targetLanguageID;
            }
            if (this.sourceLanguageID != null) {
                data.sourceLanguageID = this.sourceLanguageID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.targetLanguageID != 0)
                writer.writeInt32(1, this.targetLanguageID);
            if (this.sourceLanguageID != 0)
                writer.writeInt32(2, this.sourceLanguageID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCourse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCourse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.targetLanguageID = reader.readInt32();
                        break;
                    case 2:
                        message.sourceLanguageID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCourse {
            return CreateCourse.deserialize(bytes);
        }
    }
    export class UpdateCourse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            targetLanguageID?: number;
            sourceLanguageID?: number;
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("targetLanguageID" in data && data.targetLanguageID != undefined) {
                    this.targetLanguageID = data.targetLanguageID;
                }
                if ("sourceLanguageID" in data && data.sourceLanguageID != undefined) {
                    this.sourceLanguageID = data.sourceLanguageID;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get targetLanguageID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set targetLanguageID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get sourceLanguageID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sourceLanguageID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            targetLanguageID?: number;
            sourceLanguageID?: number;
            status?: boolean;
        }): UpdateCourse {
            const message = new UpdateCourse({});
            if (data.targetLanguageID != null) {
                message.targetLanguageID = data.targetLanguageID;
            }
            if (data.sourceLanguageID != null) {
                message.sourceLanguageID = data.sourceLanguageID;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                targetLanguageID?: number;
                sourceLanguageID?: number;
                status?: boolean;
            } = {};
            if (this.targetLanguageID != null) {
                data.targetLanguageID = this.targetLanguageID;
            }
            if (this.sourceLanguageID != null) {
                data.sourceLanguageID = this.sourceLanguageID;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.targetLanguageID != 0)
                writer.writeInt32(1, this.targetLanguageID);
            if (this.sourceLanguageID != 0)
                writer.writeInt32(2, this.sourceLanguageID);
            if (this.status != false)
                writer.writeBool(3, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCourse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCourse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.targetLanguageID = reader.readInt32();
                        break;
                    case 2:
                        message.sourceLanguageID = reader.readInt32();
                        break;
                    case 3:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCourse {
            return UpdateCourse.deserialize(bytes);
        }
    }
    export class CourseObject extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            targetLanguageID?: number;
            sourceLanguageID?: number;
            status?: boolean;
            createdAt?: string;
            updatedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("targetLanguageID" in data && data.targetLanguageID != undefined) {
                    this.targetLanguageID = data.targetLanguageID;
                }
                if ("sourceLanguageID" in data && data.sourceLanguageID != undefined) {
                    this.sourceLanguageID = data.sourceLanguageID;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get targetLanguageID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set targetLanguageID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sourceLanguageID() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set sourceLanguageID(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set updatedAt(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: number;
            targetLanguageID?: number;
            sourceLanguageID?: number;
            status?: boolean;
            createdAt?: string;
            updatedAt?: string;
        }): CourseObject {
            const message = new CourseObject({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.targetLanguageID != null) {
                message.targetLanguageID = data.targetLanguageID;
            }
            if (data.sourceLanguageID != null) {
                message.sourceLanguageID = data.sourceLanguageID;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                targetLanguageID?: number;
                sourceLanguageID?: number;
                status?: boolean;
                createdAt?: string;
                updatedAt?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.targetLanguageID != null) {
                data.targetLanguageID = this.targetLanguageID;
            }
            if (this.sourceLanguageID != null) {
                data.sourceLanguageID = this.sourceLanguageID;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.targetLanguageID != 0)
                writer.writeInt32(2, this.targetLanguageID);
            if (this.sourceLanguageID != 0)
                writer.writeInt32(3, this.sourceLanguageID);
            if (this.status != false)
                writer.writeBool(4, this.status);
            if (this.createdAt.length)
                writer.writeString(5, this.createdAt);
            if (this.updatedAt.length)
                writer.writeString(6, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CourseObject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CourseObject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.targetLanguageID = reader.readInt32();
                        break;
                    case 3:
                        message.sourceLanguageID = reader.readInt32();
                        break;
                    case 4:
                        message.status = reader.readBool();
                        break;
                    case 5:
                        message.createdAt = reader.readString();
                        break;
                    case 6:
                        message.updatedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CourseObject {
            return CourseObject.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCourseServiceService {
        static definition = {
            Create: {
                path: "/course.CourseService/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateCourse) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateCourse.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CourseObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CourseObject.deserialize(new Uint8Array(bytes))
            },
            Get: {
                path: "/course.CourseService/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.common.IntIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.common.IntIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CourseObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CourseObject.deserialize(new Uint8Array(bytes))
            },
            GetAll: {
                path: "/course.CourseService/GetAll",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.common.EmptyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.common.EmptyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CourseObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CourseObject.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/course.CourseService/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateCourse) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateCourse.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CourseObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CourseObject.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/course.CourseService/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.common.IDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.common.IDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.common.StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.common.StatusResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Create(call: grpc_1.ServerUnaryCall<CreateCourse, CourseObject>, callback: grpc_1.sendUnaryData<CourseObject>): void;
        abstract Get(call: grpc_1.ServerUnaryCall<dependency_1.common.IntIDRequest, CourseObject>, callback: grpc_1.sendUnaryData<CourseObject>): void;
        abstract GetAll(call: grpc_1.ServerUnaryCall<dependency_1.common.EmptyRequest, CourseObject>, callback: grpc_1.sendUnaryData<CourseObject>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<UpdateCourse, CourseObject>, callback: grpc_1.sendUnaryData<CourseObject>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<dependency_1.common.IDRequest, dependency_1.common.StatusResponse>, callback: grpc_1.sendUnaryData<dependency_1.common.StatusResponse>): void;
    }
    export class CourseServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCourseServiceService.definition, "CourseService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Create: GrpcUnaryServiceInterface<CreateCourse, CourseObject> = (message: CreateCourse, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CourseObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CourseObject>, callback?: grpc_1.requestCallback<CourseObject>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Get: GrpcUnaryServiceInterface<dependency_1.common.IntIDRequest, CourseObject> = (message: dependency_1.common.IntIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CourseObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CourseObject>, callback?: grpc_1.requestCallback<CourseObject>): grpc_1.ClientUnaryCall => {
            return super.Get(message, metadata, options, callback);
        };
        GetAll: GrpcUnaryServiceInterface<dependency_1.common.EmptyRequest, CourseObject> = (message: dependency_1.common.EmptyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CourseObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CourseObject>, callback?: grpc_1.requestCallback<CourseObject>): grpc_1.ClientUnaryCall => {
            return super.GetAll(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<UpdateCourse, CourseObject> = (message: UpdateCourse, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CourseObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CourseObject>, callback?: grpc_1.requestCallback<CourseObject>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<dependency_1.common.IDRequest, dependency_1.common.StatusResponse> = (message: dependency_1.common.IDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.StatusResponse>, callback?: grpc_1.requestCallback<dependency_1.common.StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
    }
}
