/**
 * @fileoverview gRPC-Web generated client stub for section
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: section.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_pb = require('./common_pb.js')
const proto = {};
proto.section = require('./section_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.section.SectionServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.section.SectionServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.section.CreateSectionRequest,
 *   !proto.section.SectionObject>}
 */
const methodDescriptor_SectionService_Create = new grpc.web.MethodDescriptor(
  '/section.SectionService/Create',
  grpc.web.MethodType.UNARY,
  proto.section.CreateSectionRequest,
  proto.section.SectionObject,
  /**
   * @param {!proto.section.CreateSectionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.section.SectionObject.deserializeBinary
);


/**
 * @param {!proto.section.CreateSectionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.section.SectionObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.section.SectionObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.section.SectionServiceClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/section.SectionService/Create',
      request,
      metadata || {},
      methodDescriptor_SectionService_Create,
      callback);
};


/**
 * @param {!proto.section.CreateSectionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.section.SectionObject>}
 *     Promise that resolves to the response
 */
proto.section.SectionServicePromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/section.SectionService/Create',
      request,
      metadata || {},
      methodDescriptor_SectionService_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.section.GetSectionRequest,
 *   !proto.section.PaginationResponse>}
 */
const methodDescriptor_SectionService_GetAll = new grpc.web.MethodDescriptor(
  '/section.SectionService/GetAll',
  grpc.web.MethodType.UNARY,
  proto.section.GetSectionRequest,
  proto.section.PaginationResponse,
  /**
   * @param {!proto.section.GetSectionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.section.PaginationResponse.deserializeBinary
);


/**
 * @param {!proto.section.GetSectionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.section.PaginationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.section.PaginationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.section.SectionServiceClient.prototype.getAll =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/section.SectionService/GetAll',
      request,
      metadata || {},
      methodDescriptor_SectionService_GetAll,
      callback);
};


/**
 * @param {!proto.section.GetSectionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.section.PaginationResponse>}
 *     Promise that resolves to the response
 */
proto.section.SectionServicePromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/section.SectionService/GetAll',
      request,
      metadata || {},
      methodDescriptor_SectionService_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.IntIDRequest,
 *   !proto.section.SectionObject>}
 */
const methodDescriptor_SectionService_Get = new grpc.web.MethodDescriptor(
  '/section.SectionService/Get',
  grpc.web.MethodType.UNARY,
  common_pb.IntIDRequest,
  proto.section.SectionObject,
  /**
   * @param {!proto.common.IntIDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.section.SectionObject.deserializeBinary
);


/**
 * @param {!proto.common.IntIDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.section.SectionObject)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.section.SectionObject>|undefined}
 *     The XHR Node Readable Stream
 */
proto.section.SectionServiceClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/section.SectionService/Get',
      request,
      metadata || {},
      methodDescriptor_SectionService_Get,
      callback);
};


/**
 * @param {!proto.common.IntIDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.section.SectionObject>}
 *     Promise that resolves to the response
 */
proto.section.SectionServicePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/section.SectionService/Get',
      request,
      metadata || {},
      methodDescriptor_SectionService_Get);
};


module.exports = proto.section;

