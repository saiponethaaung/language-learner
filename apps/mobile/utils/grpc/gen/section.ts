/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: section.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace section {
    export class CreateSectionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            courseID?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("courseID" in data && data.courseID != undefined) {
                    this.courseID = data.courseID;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get courseID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set courseID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            courseID?: number;
            name?: string;
        }): CreateSectionRequest {
            const message = new CreateSectionRequest({});
            if (data.courseID != null) {
                message.courseID = data.courseID;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                courseID?: number;
                name?: string;
            } = {};
            if (this.courseID != null) {
                data.courseID = this.courseID;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.courseID != 0)
                writer.writeInt32(1, this.courseID);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSectionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSectionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.courseID = reader.readInt32();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSectionRequest {
            return CreateSectionRequest.deserialize(bytes);
        }
    }
    export class SectionObject extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            courseID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("courseID" in data && data.courseID != undefined) {
                    this.courseID = data.courseID;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get courseID() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set courseID(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            courseID?: number;
        }): SectionObject {
            const message = new SectionObject({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.courseID != null) {
                message.courseID = data.courseID;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                courseID?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.courseID != null) {
                data.courseID = this.courseID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.courseID != 0)
                writer.writeInt32(3, this.courseID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SectionObject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SectionObject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.courseID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SectionObject {
            return SectionObject.deserialize(bytes);
        }
    }
    export class PaginationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: SectionObject[];
            pagination?: dependency_1.common.PaginationObject;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, SectionObject, 1) as SectionObject[];
        }
        set data(value: SectionObject[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.PaginationObject, 2) as dependency_1.common.PaginationObject;
        }
        set pagination(value: dependency_1.common.PaginationObject) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            data?: ReturnType<typeof SectionObject.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_1.common.PaginationObject.prototype.toObject>;
        }): PaginationResponse {
            const message = new PaginationResponse({});
            if (data.data != null) {
                message.data = data.data.map(item => SectionObject.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.common.PaginationObject.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof SectionObject.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_1.common.PaginationObject.prototype.toObject>;
            } = {};
            if (this.data != null) {
                data.data = this.data.map((item: SectionObject) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedMessage(1, this.data, (item: SectionObject) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaginationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PaginationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SectionObject.deserialize(reader), SectionObject));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.common.PaginationObject.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PaginationResponse {
            return PaginationResponse.deserialize(bytes);
        }
    }
    export class GetSectionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page?: number;
            limit?: number;
        }): GetSectionRequest {
            const message = new GetSectionRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                limit?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeInt32(1, this.page);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSectionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSectionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSectionRequest {
            return GetSectionRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSectionServiceService {
        static definition = {
            Create: {
                path: "/section.SectionService/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateSectionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateSectionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SectionObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SectionObject.deserialize(new Uint8Array(bytes))
            },
            GetAll: {
                path: "/section.SectionService/GetAll",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetSectionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetSectionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PaginationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PaginationResponse.deserialize(new Uint8Array(bytes))
            },
            Get: {
                path: "/section.SectionService/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.common.IntIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.common.IntIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SectionObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SectionObject.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Create(call: grpc_1.ServerUnaryCall<CreateSectionRequest, SectionObject>, callback: grpc_1.sendUnaryData<SectionObject>): void;
        abstract GetAll(call: grpc_1.ServerUnaryCall<GetSectionRequest, PaginationResponse>, callback: grpc_1.sendUnaryData<PaginationResponse>): void;
        abstract Get(call: grpc_1.ServerUnaryCall<dependency_1.common.IntIDRequest, SectionObject>, callback: grpc_1.sendUnaryData<SectionObject>): void;
    }
    export class SectionServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedSectionServiceService.definition, "SectionService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Create: GrpcUnaryServiceInterface<CreateSectionRequest, SectionObject> = (message: CreateSectionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SectionObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SectionObject>, callback?: grpc_1.requestCallback<SectionObject>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        GetAll: GrpcUnaryServiceInterface<GetSectionRequest, PaginationResponse> = (message: GetSectionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PaginationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PaginationResponse>, callback?: grpc_1.requestCallback<PaginationResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAll(message, metadata, options, callback);
        };
        Get: GrpcUnaryServiceInterface<dependency_1.common.IntIDRequest, SectionObject> = (message: dependency_1.common.IntIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SectionObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SectionObject>, callback?: grpc_1.requestCallback<SectionObject>): grpc_1.ClientUnaryCall => {
            return super.Get(message, metadata, options, callback);
        };
    }
}
