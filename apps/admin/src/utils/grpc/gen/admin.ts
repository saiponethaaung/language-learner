/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: admin.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace admin {
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            status?: boolean;
        } & (({
            accessToken?: string;
        }) | ({
            error?: dependency_1.common.ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("accessToken" in data && data.accessToken != undefined) {
                    this.accessToken = data.accessToken;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get accessToken() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set accessToken(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_accessToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ErrorResponse, 3) as dependency_1.common.ErrorResponse;
        }
        set error(value: dependency_1.common.ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _accessToken() {
            const cases: {
                [index: number]: "none" | "accessToken";
            } = {
                0: "none",
                2: "accessToken"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                3: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            status?: boolean;
            accessToken?: string;
            error?: ReturnType<typeof dependency_1.common.ErrorResponse.prototype.toObject>;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.accessToken != null) {
                message.accessToken = data.accessToken;
            }
            if (data.error != null) {
                message.error = dependency_1.common.ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
                accessToken?: string;
                error?: ReturnType<typeof dependency_1.common.ErrorResponse.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.accessToken != null) {
                data.accessToken = this.accessToken;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (this.has_accessToken)
                writer.writeString(2, this.accessToken);
            if (this.has_error)
                writer.writeMessage(3, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    case 2:
                        message.accessToken = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.error, () => message.error = dependency_1.common.ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    export class RegisterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            email?: string;
            password?: string;
        }): RegisterRequest {
            const message = new RegisterRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                email?: string;
                password?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterRequest {
            return RegisterRequest.deserialize(bytes);
        }
    }
    export class RegisterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            status?: boolean;
        } & (({
            message?: string;
        }) | ({
            error?: dependency_1.common.ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ErrorResponse, 3) as dependency_1.common.ErrorResponse;
        }
        set error(value: dependency_1.common.ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _message() {
            const cases: {
                [index: number]: "none" | "message";
            } = {
                0: "none",
                2: "message"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                3: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            status?: boolean;
            message?: string;
            error?: ReturnType<typeof dependency_1.common.ErrorResponse.prototype.toObject>;
        }): RegisterResponse {
            const message = new RegisterResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.error != null) {
                message.error = dependency_1.common.ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
                message?: string;
                error?: ReturnType<typeof dependency_1.common.ErrorResponse.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (this.has_message)
                writer.writeString(2, this.message);
            if (this.has_error)
                writer.writeMessage(3, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.error, () => message.error = dependency_1.common.ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterResponse {
            return RegisterResponse.deserialize(bytes);
        }
    }
    export class AdminObject extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            email?: string;
            createdAt?: string;
            updatedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set updatedAt(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            email?: string;
            createdAt?: string;
            updatedAt?: string;
        }): AdminObject {
            const message = new AdminObject({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                email?: string;
                createdAt?: string;
                updatedAt?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.createdAt.length)
                writer.writeString(4, this.createdAt);
            if (this.updatedAt.length)
                writer.writeString(5, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminObject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminObject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.createdAt = reader.readString();
                        break;
                    case 5:
                        message.updatedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdminObject {
            return AdminObject.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAdminServiceService {
        static definition = {
            Login: {
                path: "/admin.AdminService/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            Register: {
                path: "/admin.AdminService/Register",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterResponse.deserialize(new Uint8Array(bytes))
            },
            Profile: {
                path: "/admin.AdminService/Profile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.common.EmptyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.common.EmptyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AdminObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AdminObject.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract Register(call: grpc_1.ServerUnaryCall<RegisterRequest, RegisterResponse>, callback: grpc_1.sendUnaryData<RegisterResponse>): void;
        abstract Profile(call: grpc_1.ServerUnaryCall<dependency_1.common.EmptyRequest, AdminObject>, callback: grpc_1.sendUnaryData<AdminObject>): void;
    }
    export class AdminServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAdminServiceService.definition, "AdminService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.Login(message, metadata, options, callback);
        };
        Register: GrpcUnaryServiceInterface<RegisterRequest, RegisterResponse> = (message: RegisterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterResponse>, callback?: grpc_1.requestCallback<RegisterResponse>): grpc_1.ClientUnaryCall => {
            return super.Register(message, metadata, options, callback);
        };
        Profile: GrpcUnaryServiceInterface<dependency_1.common.EmptyRequest, AdminObject> = (message: dependency_1.common.EmptyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AdminObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AdminObject>, callback?: grpc_1.requestCallback<AdminObject>): grpc_1.ClientUnaryCall => {
            return super.Profile(message, metadata, options, callback);
        };
    }
}
